* {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

body {
    height: 100vh;
    width: 60%;
    background: rgb(191,76,5);
    background: linear-gradient(0deg, rgba(191,76,5,1) 0%, rgba(253,177,45,1) 100%);
}

/*
  width and height give a standard size 
  margin auto centers the game board
  flex adapts to screen size
  perspecive sets z axis distance from user (lover value = bigger effect)
*/

.memory-game {
    width: 80%;
    height: 70%;
    margin: auto;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    grid-gap: 10px;
    flex-wrap: wrap;
    perspective: 1000px;
}

/*
  calc for height and width makes 3 rows of 4 cards
  position relative allows us to position the children of the memory cards
  preserve 3d positions them in a 3d space instead of flattening it to the background
  the transform .5 produces the movement effect
*/

.memory-card {
    position: relative;
    transform: scale(1);
    transform-style: preserve-3d;
    transition: transform .5s;
    box-shadow: 1px 1px 1px rgba(0,0,0,.3);
}

/*active when clicked*/

.memory-card:active {
    transform: scale(0.97);
    transition: transform .2s;
}

/*when the card is clicked JS activates this class and flips the card over*/

.memory-card.flip {
    transform: rotateY(180deg);
}

/*
  position absolute allows us to stack the front and back images
  backface visibility hides the back of the robot
*/

.front-face,
.back-face {
    width: 100%;
    height: 100%;
    padding: 20px;
    position: absolute;
    border-radius: 5px;
    background: #C7C6C6;
    backface-visibility: hidden;
}

/*the transform shows the logo on the back of the card*/

.front-face {
    transform: rotateY(180deg);
}

.heading {
    display: block;
    text-align: center;
}

h1 {
    font-family: Calibri;
}